@page "/add"
@using ET.Web.Services
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager

<h3>Add Employee</h3>
<EditForm EditContext="_editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="_newEmployee.Name" />
        <ValidationMessage For="@(() => _newEmployee.Name)" />
        @if (validationErrors.ContainsKey(nameof(_newEmployee.Name)))
        {
            <div class="text-danger">
                @foreach (var error in validationErrors[nameof(_newEmployee.Name)])
                {
                    <div>@error</div>
                }
            </div>
        }
    </div>

    <div class="mb-3">
        <label for="surname" class="form-label">Surname</label>
        <InputText id="surname" class="form-control" @bind-Value="_newEmployee.Surname" />
        <ValidationMessage For="@(() => _newEmployee.Surname)" />
        @if (validationErrors.ContainsKey(nameof(_newEmployee.Surname)))
        {
            <div class="text-danger">
                @foreach (var error in validationErrors[nameof(_newEmployee.Surname)])
                {
                    <div>@error</div>
                }
            </div>
        }
    </div>

    <div class="mb-3">
        <label for="birthdate" class="form-label">Birth Date</label>
        <InputText id="birthdate" class="form-control" @bind-Value="_newEmployee.BirthDate" />
        <ValidationMessage For="@(() => _newEmployee.BirthDate)" />
        @if (validationErrors.ContainsKey(nameof(_newEmployee.BirthDate)))
        {
            <div class="text-danger">
                @foreach (var error in validationErrors[nameof(_newEmployee.BirthDate)])
                {
                    <div>@error</div>
                }
            </div>
        }
    </div>

    <div class="mb-3">
        <label for="position" class="form-label">Position</label>
        <InputSelect id="position" class="form-control" @bind-Value="_newEmployee.Position">
            <option value="">Select a Position</option>
            @foreach (var position in _positions)
            {
                <option value="@position">@position</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => _newEmployee.Position)" />
        @if (validationErrors.ContainsKey("Position"))
        {
            <div class="text-danger">
                @foreach (var error in validationErrors["Position"])
                {
                    <div>@error</div>
                }
            </div>
        }
    </div>

    <div class="mb-3">
        <label for="ipaddress" class="form-label">IP Address</label>
        <InputText id="ipaddress" class="form-control" @bind-Value="_newEmployee.IpAddress" />
        <ValidationMessage For="@(() => _newEmployee.IpAddress)" />
        @if (validationErrors.ContainsKey(nameof(_newEmployee.IpAddress)))
        {
            <div class="text-danger">
                @foreach (var error in validationErrors[nameof(_newEmployee.IpAddress)])
                {
                    <div>@error</div>
                }
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Add Employee</button>
</EditForm>
