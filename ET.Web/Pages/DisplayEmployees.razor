@page "/employees"
@using System.ComponentModel.DataAnnotations
@using ET.Models
@using ET.Web.Services
@inject IEmployeeService EmployeeService

<h3>Employees</h3>

@if (employees == null) {
    <p>Loading employees...</p>
}
else if (!employees.Any()) {
    <p>No employees found.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Surname</th>
            <th>Birth date</th>
            <th>Position</th>
            <th>Ip address</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var employee in employees)
        {
            <tr @key="employee.EmployeeId">
                <td>@employee.Name</td>
                <td>@employee.Surname</td>
                <td>@employee.BirthDate</td>
                <td>@employee.Position?.PositionName</td>
                <td>@employee.IpAddress</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => ShowEditModal(employee)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteEmployee(employee.EmployeeId)">X</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (isEditModalVisible)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Employee</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <EditForm Model="editEmployee" OnValidSubmit="UpdateEmployee">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="name" class="form-label">Name</label>
                            <InputText id="name" class="form-control" @bind-Value="editEmployee.Name" />
                            <ValidationMessage For="@(() => editEmployee.Name)" />
                        </div>
                        <div class="mb-3">
                            <label for="surname" class="form-label">Surname</label>
                            <InputText id="surname" class="form-control" @bind-Value="editEmployee.Surname" />
                            <ValidationMessage For="@(() => editEmployee.Surname)" />
                        </div>
                        <div class="mb-3">
                            <label for="birthDate" class="form-label">Birth Date</label>
                            <InputText id="birthDate" class="form-control" @bind-Value="editEmployee.BirthDate" />
                            <ValidationMessage For="@(() => editEmployee.BirthDate)" />
                            @if (validationErrors.ContainsKey(nameof(editEmployee.BirthDate)))
                            {
                                <div class="text-danger">
                                    @foreach (var error in validationErrors[nameof(editEmployee.BirthDate)])
                                    {
                                        <div>@error</div>
                                    }
                                </div>
                            }
                        </div>
                        <div class="mb-3">
                            <label for="position" class="form-label">Position</label>
                            @* <InputText id="position" class="form-control" @bind-Value="editEmployee.Position" /> *@
                            <InputSelect id="position" class="form-control" @bind-Value="editEmployee.Position">
                                <option value="">Select a Position</option>
                                @foreach (var position in positions)
                                {
                                    <option value="@position">@position</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => editEmployee.Position)" />
                        </div>
                        <div class="mb-3">
                            <label for="ipAddress" class="form-label">IP Address</label>
                            <InputText id="ipAddress" class="form-control" @bind-Value="editEmployee.IpAddress" />
                            <ValidationMessage For="@(() => editEmployee.IpAddress)" />
                            @if (validationErrors.ContainsKey(nameof(editEmployee.IpAddress)))
                            {
                                <div class="text-danger">
                                    @foreach (var error in validationErrors[nameof(editEmployee.IpAddress)])
                                    {
                                        <div>@error</div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}


@* <button class="btn btn-success" @onclick="AddEmployee">Add Employee</button> *@

@* ReSharper disable once InconsistentNaming *@
@code {
    [Parameter]
    public IEnumerable<Employee>? employees { get; set; }
    private IEnumerable<string> positions;
    private EmployeeForm editEmployee;
    private bool isEditModalVisible;
    private Dictionary<string, List<string>> validationErrors = new();
    
    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetEmployees();
        positions = await EmployeeService.GetPositions();
    }

    private void ShowEditModal(Employee employee)
    {
        editEmployee = new EmployeeForm
        {
            Id = employee.EmployeeId,
            Name = employee.Name,
            Surname = employee.Surname,
            BirthDate = employee.BirthDate,
            Position = employee.Position.PositionName,
            IpAddress = employee.IpAddress
        };
        validationErrors.Clear();
        isEditModalVisible = true;
    }

    private void CloseEditModal()
    {
        isEditModalVisible = false;
        // editEmployee = new Employee();
    }
    
    private async Task UpdateEmployee()
    {
        var validationResults = new List<ValidationResult>();
        var validationContext = new ValidationContext(editEmployee, serviceProvider: null, items: null);
    
        if (!Validator.TryValidateObject(editEmployee, validationContext, validationResults, true))
        {
            validationErrors.Clear();
            foreach (var validationResult in validationResults)
            {
                foreach (var memberName in validationResult.MemberNames)
                {
                    if (!validationErrors.ContainsKey(memberName))
                    {
                        validationErrors[memberName] = new List<string>();
                    }
                    validationErrors[memberName].Add(validationResult.ErrorMessage);
                }
            }
            return; // Do not proceed with the backend request
        }
        
        try
        {
            await EmployeeService.UpdateEmployee(editEmployee);
            employees = await EmployeeService.GetEmployees();
            isEditModalVisible = false;
            StateHasChanged();
        }
        catch (Exception e) { Console.WriteLine(e); throw; }
    }
    
    private async Task DeleteEmployee(int id)
    {
        Console.WriteLine($"deleting {id}");
        
        if (await EmployeeService.DeleteEmployee(id))
        {
            employees = await EmployeeService.GetEmployees();
        }
        else
        {
            Console.WriteLine("Failed to delete employee.");
        }
    }
    //
    // private void AddEmployee()
    // {
    //     NavigationManager.NavigateTo("/employees/add");
    // }
}